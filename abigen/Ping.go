// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abigen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PingMetaData contains all meta data concerning the Ping contract.
var PingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"errorCode\",\"type\":\"int256\"}],\"name\":\"ActorError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ActorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailToCallActor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"CommonTypes.FilActorId\",\"name\":\"actorId\",\"type\":\"uint64\"}],\"name\":\"InvalidActorID\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"InvalidCodec\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidResponseLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeValueNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AmountWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"IsOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"target\",\"type\":\"uint64\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"target\",\"type\":\"uint64\"}],\"name\":\"checkIsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"target\",\"type\":\"uint64\"}],\"name\":\"getBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsFEVM\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"target\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"target\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x608060405234801561001057600080fd5b506129cf806100206000396000f3fe6080604052600436106100745760003560e01c806338792dd31161004e57806338792dd3146101205780634249538e146101405780637cb2e58e1461015c578063f5914f5b1461017c57600080fd5b80630d8e6e2c146100b9578063341b9e5a146100de5780633823c1891461010057600080fd5b366100b4577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f8852587433346040516100aa9291906120a3565b60405180910390a1005b600080fd5b3480156100c557600080fd5b5060016040516100d591906120be565b60405180910390f35b3480156100ea57600080fd5b506100fe6100f93660046120ee565b61019c565b005b34801561010c57600080fd5b506100fe61011b366004612120565b6101de565b34801561012c57600080fd5b506100fe61013b366004612120565b6101ec565b34801561014c57600080fd5b5060016040516100d59190612165565b34801561016857600080fd5b506100fe6101773660046120ee565b61023e565b34801561018857600080fd5b506100fe6101973660046120ee565b610276565b7fe8d947d7ebdd7b8b8fa2ad2022c7591418ac32d8c29c5f8a8fc9de52ffa540926101c682610283565b6040516101d391906120be565b60405180910390a150565b6101e8828261029c565b5050565b476101f783836102a6565b477f3e92aa4db3477ddd7c90d0ded7b985612c042e99cdeed9408343c650bdda73b961022383836121a2565b60405161023091906120be565b60405180910390a150505050565b7ff86afeaae77bccf494ba8205cc81f613ed84b3839d47a054b15a4ffd41ebd53e61026982306102bd565b6040516101d39190612165565b61028081306102ed565b50565b6000610296610291836102ff565b610374565b92915050565b6101e88282610386565b6102b8826102b3836103fd565b610449565b505050565b60006102c88261049b565b67ffffffffffffffff166102db84610597565b67ffffffffffffffff16149392505050565b6101e8826102fa8361049b565b6105ab565b61031a60405160408082019052606081526000602082015290565b600080604051818152601f19601f8301168101602001604052908015610347576020820181803683370190505b50905060006103618463eff983fa600085600060016105bd565b905061036c81610628565b949350505050565b600061037f826106bc565b5092915050565b60006103c283828080604051818152601f19601f83011681016020016040529080156103b9576020820181803683370190505b50866000610753565b90508051156102b8576040517f0e74990700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61041860405160408082019052606081526000602082015290565b6000610425836000610862565b90506040516040808201905280825181526020018260200151151590529392505050565b61046460405160408082019052606081526000602082015290565b600061046f836108ba565b90506000610487856387ed0a646051856000806105bd565b905061049281610628565b95945050505050565b600080826040516020016104af919061220c565b604051602081830303815290604052905060008073fe0000000000000000000000000000000000000173ffffffffffffffffffffffffffffffffffffffff16836040516104fc9190612290565b600060405180830381855afa9150503d8060008114610537576040513d603f01601f191681016040523d815291503d6000602084013e61053c565b606091505b509150915081610578576040517f8a7db5bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208201825181019061058d91906122a9565b9695505050505050565b60006102966105a583610929565b51610983565b6101e8826105b883610a3c565b610a94565b606060648767ffffffffffffffff16101561060f57866040517fa292827300000000000000000000000000000000000000000000000000000000815260040161060691906122e5565b60405180910390fd5b61061d878787878787610753565b979650505050505050565b61064360405160408082019052606081526000602082015290565b6060600080845111156106725761065a8482610af8565b90925090506000825111156106725761036c82610cbb565b60405160408082019052806000604051818152601f19601f83011681016020016040529080156106a9576020820181803683370190505b5081526000602090910152949350505050565b6000808260200151156106fb576040517f83041cea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061070a6000196000610862565b9050600061071d85518660200151610e86565b90506107298183610eb8565b1561073c57506000946001945092505050565b8051610747906122fd565b95600095509350505050565b606061077373fe0000000000000000000000000000000000000584610ee2565b60008073fe0000000000000000000000000000000000000588868661079957600061079c565b60015b8a8a8e6040516020016107b496959493929190612388565b6040516020818303038152906040526040516107d09190612290565b600060405180830381855af49150503d806000811461080b576040513d603f01601f191681016040523d815291503d6000602084013e610810565b606091505b50915091508161084c576040517f8a7db5bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61085581610f5c565b9998505050505050505050565b610888604051806060016040528060608152602001600015158152602001600081525090565b6108b38360405160200161089c91906123de565b60405160208183030381529060405283600061109a565b9392505050565b60606000806108c884611171565b90506108d460016112f4565b6108de90836123f0565b91506108e981611342565b6108f390836123f0565b915060006109008361135a565b905061090d81600161137a565b61092061091986611171565b8290611386565b6104928161139f565b610931612000565b600080604051818152601f19601f830116810160200160405290801561095e576020820181803683370190505b50905060006109788463c33a1cc6600085600060016105bd565b905061036c816113cc565b6000808073fe0000000000000000000000000000000000000184516040516109ab9190612290565b600060405180830381855afa9150503d80600081146109e6576040513d603f01601f191681016040523d815291503d6000602084013e6109eb565b606091505b509150915081610a27576040517f8a7db5bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208201825181019061049291906122a9565b610a50604051602081016040526060815290565b6000610a5b8361146a565b905060405160208101604052808251604051602001610a7a9190612403565b604051602081830303815290604052815250915050919050565b6000610a9f826114c4565b90506000610ab784633c3c5e9b6051856000806105bd565b9050805115610af2576040517f0e74990700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60606000806000610b0986866114f6565b965090925067ffffffffffffffff16905060ff821660061480610b2f575060ff82166002145b610b4b5760405162461bcd60e51b81526004016106069061246e565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa60ff831601610ba357610b7f86866114f6565b965090925067ffffffffffffffff16905060ff8216600214610ba357610ba361247e565b6000610baf82876123f0565b905060008267ffffffffffffffff811115610bcc57610bcc6121b5565b604051818152601f19601f8301168101602001604052908015610bf6576020820181803683370190505b5090506000875b83811015610c9f57898181518110610c1757610c176124ad565b60200101517fff0000000000000000000000000000000000000000000000000000000000000016838381518110610c5057610c506124ad565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081610c89816124dc565b9250508080610c97906124dc565b915050610bfd565b5081610cab858a6123f0565b9650965050505050509250929050565b610cd660405160408082019052606081526000602082015290565b8151600003610d0e57604051806040016040528060405160408082019052600181526000602080830182905291835291015292915050565b600060018351610d1e91906121a2565b67ffffffffffffffff811115610d3657610d366121b5565b604051818152601f19601f8301168101602001604052908015610d60576020820181803683370190505b509050600083600081518110610d7857610d786124ad565b60200101517fff00000000000000000000000000000000000000000000000000000000000000167f010000000000000000000000000000000000000000000000000000000000000003610dc9575060015b60015b8451811015610e6b57848181518110610de757610de76124ad565b60200101517fff000000000000000000000000000000000000000000000000000000000000001683610e1a6001846121a2565b81518110610e2a57610e2a6124ad565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610e63816124dc565b915050610dcc565b50604051604080820190529182521515602082015292915050565b610eac604051806060016040528060608152602001600015158152602001600081525090565b6108b38383600061109a565b600080610ec784846001611673565b905080600114610ed857600061036c565b6001949350505050565b4781811015610f215780826040517f8f0f42060000000000000000000000000000000000000000000000000000000081526004016106069291906124f6565b823f151580610af2576040517f64d954b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606060008080602085018551810190610f7591906125eb565b9194509250905067ffffffffffffffff8216610fc957805115610fc4576040517f0e74990700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611060565b67ffffffffffffffff821660511480610fec575067ffffffffffffffff82166071145b1561102c578051600003610fc4576040517f0e74990700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816040517ff1f6bced0000000000000000000000000000000000000000000000000000000081526004016106069190612656565b821561036c57826040517fd4bb667100000000000000000000000000000000000000000000000000000000815260040161060691906120be565b6110c0604051806060016040528060608152602001600015158152602001600081525090565b602084018451600059601f831615600181146110ee57601f84166020908103808601845283010192506110f8565b6020820192508382525b508282848660046101c2fa5060208151018101604052805193505b60208414611141576000602082015114600181146111315750611141565b50601f1990930192602001611113565b9283525050815260208101839052811561115b5781611165565b61116581516117b3565b60408201529392505050565b606060008251516111839060016123f0565b67ffffffffffffffff81111561119b5761119b6121b5565b604051818152601f19601f83011681016020016040529080156111c5576020820181803683370190505b509050826020015115156001146111dd5760006111ff565b7f01000000000000000000000000000000000000000000000000000000000000005b81600081518110611212576112126124ad565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600160005b8451518110156112eb5784518181518110611263576112636124ad565b60200101517fff000000000000000000000000000000000000000000000000000000000000001683838151811061129c5761129c6124ad565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350816112d5816124dc565b92505080806112e3906124dc565b915050611246565b50909392505050565b60006017821161130657506001919050565b60ff821161131657506002919050565b61ffff821161132757506003919050565b63ffffffff821161133a57506005919050565b506009919050565b6000815161135083516112f4565b61029691906123f0565b61136261203d565b61136d8151836117f1565b5060006020820152919050565b6101e88260048361186e565b6113938260028351611875565b6102b88183519061199a565b60608160200151156113c35760405162461bcd60e51b815260040161060690612698565b81515192915050565b6113d4612000565b6000806113e184826119c1565b92509050600281146113f5576113f561247e565b6113ff8483610af8565b84519190915291506114118483611a0e565b61142f5761141f8483610af8565b8460200151919091529150611463565b6000604051818152601f19601f830116810160200160405290801561145b576020820181803683370190505b508360200151525b5050919050565b61148560405160408082019052606081526000602082015290565b6701ffffffffffffff600783901c1691607f1660008390036114ab576114638282611a72565b6114b88260808317611a72565b5050611485565b919050565b606060006114d28351611342565b905060006114df8261135a565b90506114ed84518290611386565b61036c8161139f565b6000806000806115068686611ae5565b90506115136001866123f0565b94506007600582901c16601f8216601c81106115415760405162461bcd60e51b815260040161060690612700565b60188160ff16101561155f5790945060ff16925084915061166c9050565b8060ff166018036115bc5760006115768989611ae5565b90506115836001896123f0565b975060188160ff1610156115a95760405162461bcd60e51b815260040161060690612742565b9195505060ff16925084915061166c9050565b8060ff166019036115f65760006115d38989611b33565b90506115e06002896123f0565b97509195505061ffff16925084915061166c9050565b8060ff16601a0361163257600061160d8989611b74565b905061161a6004896123f0565b97509195505063ffffffff16925084915061166c9050565b8060ff16601b146116455761164561247e565b60006116518989611bb5565b905061165e6008896123f0565b975091955090935085925050505b9250925092565b6000600182156116ec578460200151801561168f575083602001515b1561169d57506000196116ec565b84602001511580156116b55750836020015115156001145b156116c45760019150506108b3565b8460200151151560011480156116dc57508360200151155b156116ec576000199150506108b3565b8360400151856040015111156117035790506108b3565b8460400151846040015111156117275761171f81600019612752565b9150506108b3565b600080808080895151905060208a510194506020895101935060005b818110156117a2578086015193508085015192508284111561176e57869750505050505050506108b3565b838311156117905761178287600019612752565b9750505050505050506108b3565b61179b6020826123f0565b9050611743565b5060009a9950505050505050505050565b60006117be82611bf6565b156117cb57506000919050565b6000602083015190506117dd81611c3f565b915060086020845103028201915050919050565b61180c60405160408082019052606081526000602082015290565b6118176020836127cd565b1561183f576118276020836127cd565b6118329060206121a2565b61183c90836123f0565b91505b60208301829052604051808452600081528281016020018181101561186357600080fd5b604052509192915050565b6102b88383835b60178167ffffffffffffffff161161189c57610af260e0600584901b168217845190611a72565b60ff8167ffffffffffffffff16116118df576118c56018611fe0600585901b1617845190611a72565b50610af267ffffffffffffffff8216600185519190611e7d565b61ffff8167ffffffffffffffff1611611923576119096019611fe0600585901b1617845190611a72565b50610af267ffffffffffffffff8216600285519190611e7d565b63ffffffff8167ffffffffffffffff16116119695761194f601a611fe0600585901b1617845190611a72565b50610af267ffffffffffffffff8216600485519190611e7d565b611980601b611fe0600585901b1617845190611a72565b50610af267ffffffffffffffff8216600885519190611e7d565b6119b560405160408082019052606081526000602082015290565b6108b383838451611f0b565b6000806000806119d186866114f6565b965090925067ffffffffffffffff16905060ff8216600414611a055760405162461bcd60e51b815260040161060690612813565b95939450505050565b6000828281518110611a2257611a226124ad565b60200101517fff00000000000000000000000000000000000000000000000000000000000000167ff600000000000000000000000000000000000000000000000000000000000000149392505050565b611a8d60405160408082019052606081526000602082015290565b600083515190506000611aa18260016123f0565b905084602001518210611ac257611ac285611abd836002612823565b611fe5565b8451602083820101858153508051821115611adb578181525b5093949350505050565b6000611af28260016123f0565b83511015611b125760405162461bcd60e51b81526004016106069061286c565b828281518110611b2457611b246124ad565b602001015160f81c9392505050565b6000611b408260026123f0565b83511015611b605760405162461bcd60e51b81526004016106069061286c565b60008260200184015160f01c949350505050565b6000611b818260046123f0565b83511015611ba15760405162461bcd60e51b81526004016106069061286c565b60008260200184015160e01c949350505050565b6000611bc28260086123f0565b83511015611be25760405162461bcd60e51b81526004016106069061286c565b60008260200184015160c01c949350505050565b60008060208301815b8451811015611c3457815192508215611c1d57506000949350505050565b602091820191611c2d90826123f0565b9050611bff565b506001949350505050565b6000811560018114611e725770010000000000000000000000000000000068010000000000000000640100000000620100006101006010600460026000198b019081041790810417908104179081041790810417908104179081041790810417600101926040517ff8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd81527ff5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe60208201527ff6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a827252361660408201527fc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff60608201527ff7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e60808201527fe39ed557db96902cd38ed14fad815115c786af479b7e8324736353433727170760a08201527fc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d236242260660c08201527f753a6d1b65325d0c552a4d1345224105391a310b29122104190a11030902010060e082015261010081016040527e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff7f010000000000000000000000000000000000000000000000000000000000000080828802049150808260ff03840151047f80000000000000000000000000000000000000000000000000000000000000008511610100020195505050600019820182169050611e6c576001830192505b50611e77565b600091505b50919050565b611e9860405160408082019052606081526000602082015290565b600084515190506000611eab82856123f0565b90508560200151811115611ec857611ec886611abd836002612823565b60006001611ed88661010061298a565b611ee291906121a2565b905086518281018783198251161790528051831115611eff578281525b50959695505050505050565b611f2660405160408082019052606081526000602082015290565b8251821115611f3457600080fd5b600084515190506000611f4784836123f0565b90508560200151811115611f6457611f6486611abd836002612823565b60008087518051856020830101935080851115611f7f578482525b505050602086015b60208610611fbf5780518252611f9e6020836123f0565b9150611fab6020826123f0565b9050611fb86020876121a2565b9550611f87565b60001960208790036101000a018019825116818451161790925250959695505050505050565b600082519050611ff583836117f1565b50610af2838261199a565b604051806040016040528061201f604051602081016040526060815290565b8152602001612038604051602081016040526060815290565b905290565b604051806040016040528061206360405160408082019052606081526000602082015290565b8152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff8216610296565b61209781612070565b82525050565b80612097565b604081016120b1828561208e565b6108b3602083018461209d565b60208101610296828461209d565b67ffffffffffffffff81165b811461028057600080fd5b8035610296816120cc565b60006020828403121561210357612103600080fd5b600061036c84846120e3565b806120d8565b80356102968161210f565b6000806040838503121561213657612136600080fd5b600061214285856120e3565b925050602061215385828601612115565b9150509250929050565b801515612097565b60208101610296828461215d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561029657610296612173565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006102968260601b90565b6000610296826121e4565b61209761220782612070565b6121f0565b7f040a000000000000000000000000000000000000000000000000000000000000815260020161223c81836121fb565b601401919050565b60005b8381101561225f578082015183820152602001612247565b50506000910152565b6000612278826000815192915050565b612286818560208601612244565b9290920192915050565b6102968183612268565b6000815190506102968161210f565b6000602082840312156122be576122be600080fd5b600061036c848461229a565b600067ffffffffffffffff8216610296565b612097816122ca565b6020810161029682846122dc565b6000610296825190565b600061230d826000815192915050565b6020830161231a816122f3565b9250506020811015611e7757612337600019826020036008021b90565b90911692915050565b67ffffffffffffffff8116612097565b6000612360826000815192915050565b808452602084019350612377818560208601612244565b601f01601f19169290920192915050565b60c081016123968289612340565b6123a3602083018861209d565b6123b06040830187612340565b6123bd6060830186612340565b81810360808301526123cf8185612350565b905061061d60a08301846122dc565b6123e8818361209d565b602001919050565b8082018082111561029657610296612173565b600081526001016102968183612268565b602e8152602081017f696e76616c6964206d616a20286578706563746564204d616a546167206f722081527f4d616a42797465537472696e6729000000000000000000000000000000000000602082015290505b60400190565b6020808252810161029681612414565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060001982036124ef576124ef612173565b5060010190565b604081016120b1828561209d565b600081519050610296816120cc565b601f19601f830116810181811067ffffffffffffffff82111715612539576125396121b5565b6040525050565b600061254f6000604051905090565b90506114bf8282612513565b600067ffffffffffffffff821115612575576125756121b5565b601f19601f83011660200192915050565b60006125996125948461255b565b612540565b9050828152602081018484840111156125b4576125b4600080fd5b6125bf848285612244565b509392505050565b600082601f8301126125db576125db600080fd5b815161036c848260208601612586565b60008060006060848603121561260357612603600080fd5b600061260f868661229a565b935050602061262086828701612504565b925050604084015167ffffffffffffffff81111561264057612640600080fd5b61264c868287016125c7565b9150509250925092565b602081016102968284612340565b600c8152602081017f496e76616c69642043424f520000000000000000000000000000000000000000815290505b60200190565b6020808252810161029681612664565b60258152602081017f63616e6e6f742068616e646c652068656164657273207769746820657874726181527f203e20323700000000000000000000000000000000000000000000000000000060208201529050612468565b60208082528101610296816126a8565b600c8152602081017f696e76616c69642063626f72000000000000000000000000000000000000000081529050612692565b6020808252810161029681612710565b818102600082127f80000000000000000000000000000000000000000000000000000000000000008414161561278a5761278a612173565b818105831482151761029657610296612173565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826127dc576127dc61279e565b500690565b601f8152602081017f696e76616c6964206d616a20286578706563746564204d616a4172726179290081529050612692565b60208082528101610296816127e1565b818102811582820484141761029657610296612173565b60148152602081017f736c6963696e67206f7574206f662072616e676500000000000000000000000081529050612692565b602080825281016102968161283a565b80825b60018511156128bb5780860481111561289a5761289a612173565b60018516156128a857908102905b80026128b48560011c90565b945061287f565b94509492505050565b6000826128d3575060016108b3565b816128e0575060006108b3565b81600181146128f657600281146129005761292d565b60019150506108b3565b60ff84111561291157612911612173565b8360020a91508482111561292757612927612173565b506108b3565b5060208310610133831016604e8410600b8410161715612960575081810a8381111561295b5761295b612173565b6108b3565b61296d848484600161287c565b9250905081840481111561298357612983612173565b0292915050565b60006108b360001984846128c456fea2646970667358221220f8303173cc2cb631595dc454029790c29d7218c18586de6f72e50630c6a55b1264736f6c63430008110033",
}

// PingABI is the input ABI used to generate the binding from.
// Deprecated: Use PingMetaData.ABI instead.
var PingABI = PingMetaData.ABI

// PingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PingMetaData.Bin instead.
var PingBin = PingMetaData.Bin

// DeployPing deploys a new Ethereum contract, binding an instance of Ping to it.
func DeployPing(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ping, error) {
	parsed, err := PingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ping{PingCaller: PingCaller{contract: contract}, PingTransactor: PingTransactor{contract: contract}, PingFilterer: PingFilterer{contract: contract}}, nil
}

// Ping is an auto generated Go binding around an Ethereum contract.
type Ping struct {
	PingCaller     // Read-only binding to the contract
	PingTransactor // Write-only binding to the contract
	PingFilterer   // Log filterer for contract events
}

// PingCaller is an auto generated read-only Go binding around an Ethereum contract.
type PingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PingSession struct {
	Contract     *Ping             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PingCallerSession struct {
	Contract *PingCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PingTransactorSession struct {
	Contract     *PingTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PingRaw is an auto generated low-level Go binding around an Ethereum contract.
type PingRaw struct {
	Contract *Ping // Generic contract binding to access the raw methods on
}

// PingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PingCallerRaw struct {
	Contract *PingCaller // Generic read-only contract binding to access the raw methods on
}

// PingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PingTransactorRaw struct {
	Contract *PingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPing creates a new instance of Ping, bound to a specific deployed contract.
func NewPing(address common.Address, backend bind.ContractBackend) (*Ping, error) {
	contract, err := bindPing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ping{PingCaller: PingCaller{contract: contract}, PingTransactor: PingTransactor{contract: contract}, PingFilterer: PingFilterer{contract: contract}}, nil
}

// NewPingCaller creates a new read-only instance of Ping, bound to a specific deployed contract.
func NewPingCaller(address common.Address, caller bind.ContractCaller) (*PingCaller, error) {
	contract, err := bindPing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PingCaller{contract: contract}, nil
}

// NewPingTransactor creates a new write-only instance of Ping, bound to a specific deployed contract.
func NewPingTransactor(address common.Address, transactor bind.ContractTransactor) (*PingTransactor, error) {
	contract, err := bindPing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PingTransactor{contract: contract}, nil
}

// NewPingFilterer creates a new log filterer instance of Ping, bound to a specific deployed contract.
func NewPingFilterer(address common.Address, filterer bind.ContractFilterer) (*PingFilterer, error) {
	contract, err := bindPing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PingFilterer{contract: contract}, nil
}

// bindPing binds a generic wrapper to an already deployed contract.
func bindPing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ping *PingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ping.Contract.PingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ping *PingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ping.Contract.PingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ping *PingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ping.Contract.PingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ping *PingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ping.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ping *PingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ping.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ping *PingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ping.Contract.contract.Transact(opts, method, params...)
}

// GetIsFEVM is a free data retrieval call binding the contract method 0x4249538e.
//
// Solidity: function getIsFEVM() pure returns(bool)
func (_Ping *PingCaller) GetIsFEVM(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Ping.contract.Call(opts, &out, "getIsFEVM")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetIsFEVM is a free data retrieval call binding the contract method 0x4249538e.
//
// Solidity: function getIsFEVM() pure returns(bool)
func (_Ping *PingSession) GetIsFEVM() (bool, error) {
	return _Ping.Contract.GetIsFEVM(&_Ping.CallOpts)
}

// GetIsFEVM is a free data retrieval call binding the contract method 0x4249538e.
//
// Solidity: function getIsFEVM() pure returns(bool)
func (_Ping *PingCallerSession) GetIsFEVM() (bool, error) {
	return _Ping.Contract.GetIsFEVM(&_Ping.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(uint256)
func (_Ping *PingCaller) GetVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Ping.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(uint256)
func (_Ping *PingSession) GetVersion() (*big.Int, error) {
	return _Ping.Contract.GetVersion(&_Ping.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(uint256)
func (_Ping *PingCallerSession) GetVersion() (*big.Int, error) {
	return _Ping.Contract.GetVersion(&_Ping.CallOpts)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xf5914f5b.
//
// Solidity: function changeOwner(uint64 target) returns()
func (_Ping *PingTransactor) ChangeOwner(opts *bind.TransactOpts, target uint64) (*types.Transaction, error) {
	return _Ping.contract.Transact(opts, "changeOwner", target)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xf5914f5b.
//
// Solidity: function changeOwner(uint64 target) returns()
func (_Ping *PingSession) ChangeOwner(target uint64) (*types.Transaction, error) {
	return _Ping.Contract.ChangeOwner(&_Ping.TransactOpts, target)
}

// ChangeOwner is a paid mutator transaction binding the contract method 0xf5914f5b.
//
// Solidity: function changeOwner(uint64 target) returns()
func (_Ping *PingTransactorSession) ChangeOwner(target uint64) (*types.Transaction, error) {
	return _Ping.Contract.ChangeOwner(&_Ping.TransactOpts, target)
}

// CheckIsOwner is a paid mutator transaction binding the contract method 0x7cb2e58e.
//
// Solidity: function checkIsOwner(uint64 target) returns()
func (_Ping *PingTransactor) CheckIsOwner(opts *bind.TransactOpts, target uint64) (*types.Transaction, error) {
	return _Ping.contract.Transact(opts, "checkIsOwner", target)
}

// CheckIsOwner is a paid mutator transaction binding the contract method 0x7cb2e58e.
//
// Solidity: function checkIsOwner(uint64 target) returns()
func (_Ping *PingSession) CheckIsOwner(target uint64) (*types.Transaction, error) {
	return _Ping.Contract.CheckIsOwner(&_Ping.TransactOpts, target)
}

// CheckIsOwner is a paid mutator transaction binding the contract method 0x7cb2e58e.
//
// Solidity: function checkIsOwner(uint64 target) returns()
func (_Ping *PingTransactorSession) CheckIsOwner(target uint64) (*types.Transaction, error) {
	return _Ping.Contract.CheckIsOwner(&_Ping.TransactOpts, target)
}

// GetBalance is a paid mutator transaction binding the contract method 0x341b9e5a.
//
// Solidity: function getBalance(uint64 target) returns()
func (_Ping *PingTransactor) GetBalance(opts *bind.TransactOpts, target uint64) (*types.Transaction, error) {
	return _Ping.contract.Transact(opts, "getBalance", target)
}

// GetBalance is a paid mutator transaction binding the contract method 0x341b9e5a.
//
// Solidity: function getBalance(uint64 target) returns()
func (_Ping *PingSession) GetBalance(target uint64) (*types.Transaction, error) {
	return _Ping.Contract.GetBalance(&_Ping.TransactOpts, target)
}

// GetBalance is a paid mutator transaction binding the contract method 0x341b9e5a.
//
// Solidity: function getBalance(uint64 target) returns()
func (_Ping *PingTransactorSession) GetBalance(target uint64) (*types.Transaction, error) {
	return _Ping.Contract.GetBalance(&_Ping.TransactOpts, target)
}

// Transfer is a paid mutator transaction binding the contract method 0x3823c189.
//
// Solidity: function transfer(uint64 target, uint256 amount) returns()
func (_Ping *PingTransactor) Transfer(opts *bind.TransactOpts, target uint64, amount *big.Int) (*types.Transaction, error) {
	return _Ping.contract.Transact(opts, "transfer", target, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x3823c189.
//
// Solidity: function transfer(uint64 target, uint256 amount) returns()
func (_Ping *PingSession) Transfer(target uint64, amount *big.Int) (*types.Transaction, error) {
	return _Ping.Contract.Transfer(&_Ping.TransactOpts, target, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0x3823c189.
//
// Solidity: function transfer(uint64 target, uint256 amount) returns()
func (_Ping *PingTransactorSession) Transfer(target uint64, amount *big.Int) (*types.Transaction, error) {
	return _Ping.Contract.Transfer(&_Ping.TransactOpts, target, amount)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x38792dd3.
//
// Solidity: function withdrawBalance(uint64 target, uint256 amount) returns()
func (_Ping *PingTransactor) WithdrawBalance(opts *bind.TransactOpts, target uint64, amount *big.Int) (*types.Transaction, error) {
	return _Ping.contract.Transact(opts, "withdrawBalance", target, amount)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x38792dd3.
//
// Solidity: function withdrawBalance(uint64 target, uint256 amount) returns()
func (_Ping *PingSession) WithdrawBalance(target uint64, amount *big.Int) (*types.Transaction, error) {
	return _Ping.Contract.WithdrawBalance(&_Ping.TransactOpts, target, amount)
}

// WithdrawBalance is a paid mutator transaction binding the contract method 0x38792dd3.
//
// Solidity: function withdrawBalance(uint64 target, uint256 amount) returns()
func (_Ping *PingTransactorSession) WithdrawBalance(target uint64, amount *big.Int) (*types.Transaction, error) {
	return _Ping.Contract.WithdrawBalance(&_Ping.TransactOpts, target, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Ping *PingTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ping.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Ping *PingSession) Receive() (*types.Transaction, error) {
	return _Ping.Contract.Receive(&_Ping.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Ping *PingTransactorSession) Receive() (*types.Transaction, error) {
	return _Ping.Contract.Receive(&_Ping.TransactOpts)
}

// PingAmountWithdrawnIterator is returned from FilterAmountWithdrawn and is used to iterate over the raw logs and unpacked data for AmountWithdrawn events raised by the Ping contract.
type PingAmountWithdrawnIterator struct {
	Event *PingAmountWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PingAmountWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PingAmountWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PingAmountWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PingAmountWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PingAmountWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PingAmountWithdrawn represents a AmountWithdrawn event raised by the Ping contract.
type PingAmountWithdrawn struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAmountWithdrawn is a free log retrieval operation binding the contract event 0x3e92aa4db3477ddd7c90d0ded7b985612c042e99cdeed9408343c650bdda73b9.
//
// Solidity: event AmountWithdrawn(uint256 arg0)
func (_Ping *PingFilterer) FilterAmountWithdrawn(opts *bind.FilterOpts) (*PingAmountWithdrawnIterator, error) {

	logs, sub, err := _Ping.contract.FilterLogs(opts, "AmountWithdrawn")
	if err != nil {
		return nil, err
	}
	return &PingAmountWithdrawnIterator{contract: _Ping.contract, event: "AmountWithdrawn", logs: logs, sub: sub}, nil
}

// WatchAmountWithdrawn is a free log subscription operation binding the contract event 0x3e92aa4db3477ddd7c90d0ded7b985612c042e99cdeed9408343c650bdda73b9.
//
// Solidity: event AmountWithdrawn(uint256 arg0)
func (_Ping *PingFilterer) WatchAmountWithdrawn(opts *bind.WatchOpts, sink chan<- *PingAmountWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Ping.contract.WatchLogs(opts, "AmountWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PingAmountWithdrawn)
				if err := _Ping.contract.UnpackLog(event, "AmountWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAmountWithdrawn is a log parse operation binding the contract event 0x3e92aa4db3477ddd7c90d0ded7b985612c042e99cdeed9408343c650bdda73b9.
//
// Solidity: event AmountWithdrawn(uint256 arg0)
func (_Ping *PingFilterer) ParseAmountWithdrawn(log types.Log) (*PingAmountWithdrawn, error) {
	event := new(PingAmountWithdrawn)
	if err := _Ping.contract.UnpackLog(event, "AmountWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PingBalanceIterator is returned from FilterBalance and is used to iterate over the raw logs and unpacked data for Balance events raised by the Ping contract.
type PingBalanceIterator struct {
	Event *PingBalance // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PingBalanceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PingBalance)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PingBalance)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PingBalanceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PingBalanceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PingBalance represents a Balance event raised by the Ping contract.
type PingBalance struct {
	Arg0 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterBalance is a free log retrieval operation binding the contract event 0xe8d947d7ebdd7b8b8fa2ad2022c7591418ac32d8c29c5f8a8fc9de52ffa54092.
//
// Solidity: event Balance(uint256 arg0)
func (_Ping *PingFilterer) FilterBalance(opts *bind.FilterOpts) (*PingBalanceIterator, error) {

	logs, sub, err := _Ping.contract.FilterLogs(opts, "Balance")
	if err != nil {
		return nil, err
	}
	return &PingBalanceIterator{contract: _Ping.contract, event: "Balance", logs: logs, sub: sub}, nil
}

// WatchBalance is a free log subscription operation binding the contract event 0xe8d947d7ebdd7b8b8fa2ad2022c7591418ac32d8c29c5f8a8fc9de52ffa54092.
//
// Solidity: event Balance(uint256 arg0)
func (_Ping *PingFilterer) WatchBalance(opts *bind.WatchOpts, sink chan<- *PingBalance) (event.Subscription, error) {

	logs, sub, err := _Ping.contract.WatchLogs(opts, "Balance")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PingBalance)
				if err := _Ping.contract.UnpackLog(event, "Balance", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalance is a log parse operation binding the contract event 0xe8d947d7ebdd7b8b8fa2ad2022c7591418ac32d8c29c5f8a8fc9de52ffa54092.
//
// Solidity: event Balance(uint256 arg0)
func (_Ping *PingFilterer) ParseBalance(log types.Log) (*PingBalance, error) {
	event := new(PingBalance)
	if err := _Ping.contract.UnpackLog(event, "Balance", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PingIsOwnerIterator is returned from FilterIsOwner and is used to iterate over the raw logs and unpacked data for IsOwner events raised by the Ping contract.
type PingIsOwnerIterator struct {
	Event *PingIsOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PingIsOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PingIsOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PingIsOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PingIsOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PingIsOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PingIsOwner represents a IsOwner event raised by the Ping contract.
type PingIsOwner struct {
	Arg0 bool
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterIsOwner is a free log retrieval operation binding the contract event 0xf86afeaae77bccf494ba8205cc81f613ed84b3839d47a054b15a4ffd41ebd53e.
//
// Solidity: event IsOwner(bool arg0)
func (_Ping *PingFilterer) FilterIsOwner(opts *bind.FilterOpts) (*PingIsOwnerIterator, error) {

	logs, sub, err := _Ping.contract.FilterLogs(opts, "IsOwner")
	if err != nil {
		return nil, err
	}
	return &PingIsOwnerIterator{contract: _Ping.contract, event: "IsOwner", logs: logs, sub: sub}, nil
}

// WatchIsOwner is a free log subscription operation binding the contract event 0xf86afeaae77bccf494ba8205cc81f613ed84b3839d47a054b15a4ffd41ebd53e.
//
// Solidity: event IsOwner(bool arg0)
func (_Ping *PingFilterer) WatchIsOwner(opts *bind.WatchOpts, sink chan<- *PingIsOwner) (event.Subscription, error) {

	logs, sub, err := _Ping.contract.WatchLogs(opts, "IsOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PingIsOwner)
				if err := _Ping.contract.UnpackLog(event, "IsOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIsOwner is a log parse operation binding the contract event 0xf86afeaae77bccf494ba8205cc81f613ed84b3839d47a054b15a4ffd41ebd53e.
//
// Solidity: event IsOwner(bool arg0)
func (_Ping *PingFilterer) ParseIsOwner(log types.Log) (*PingIsOwner, error) {
	event := new(PingIsOwner)
	if err := _Ping.contract.UnpackLog(event, "IsOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PingReceivedIterator is returned from FilterReceived and is used to iterate over the raw logs and unpacked data for Received events raised by the Ping contract.
type PingReceivedIterator struct {
	Event *PingReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PingReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PingReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PingReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PingReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PingReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PingReceived represents a Received event raised by the Ping contract.
type PingReceived struct {
	Arg0 common.Address
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterReceived is a free log retrieval operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address arg0, uint256 arg1)
func (_Ping *PingFilterer) FilterReceived(opts *bind.FilterOpts) (*PingReceivedIterator, error) {

	logs, sub, err := _Ping.contract.FilterLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return &PingReceivedIterator{contract: _Ping.contract, event: "Received", logs: logs, sub: sub}, nil
}

// WatchReceived is a free log subscription operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address arg0, uint256 arg1)
func (_Ping *PingFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *PingReceived) (event.Subscription, error) {

	logs, sub, err := _Ping.contract.WatchLogs(opts, "Received")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PingReceived)
				if err := _Ping.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReceived is a log parse operation binding the contract event 0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874.
//
// Solidity: event Received(address arg0, uint256 arg1)
func (_Ping *PingFilterer) ParseReceived(log types.Log) (*PingReceived, error) {
	event := new(PingReceived)
	if err := _Ping.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
