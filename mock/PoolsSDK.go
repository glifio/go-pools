// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	types "github.com/glifio/go-pools/types"
	mock "github.com/stretchr/testify/mock"
)

// PoolsSDK is an autogenerated mock type for the PoolsSDK type
type PoolsSDK struct {
	mock.Mock
}

type PoolsSDK_Expecter struct {
	mock *mock.Mock
}

func (_m *PoolsSDK) EXPECT() *PoolsSDK_Expecter {
	return &PoolsSDK_Expecter{mock: &_m.Mock}
}

// Act provides a mock function with given fields:
func (_m *PoolsSDK) Act() types.FEVMActions {
	ret := _m.Called()

	var r0 types.FEVMActions
	if rf, ok := ret.Get(0).(func() types.FEVMActions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.FEVMActions)
		}
	}

	return r0
}

// PoolsSDK_Act_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Act'
type PoolsSDK_Act_Call struct {
	*mock.Call
}

// Act is a helper method to define mock.On call
func (_e *PoolsSDK_Expecter) Act() *PoolsSDK_Act_Call {
	return &PoolsSDK_Act_Call{Call: _e.mock.On("Act")}
}

func (_c *PoolsSDK_Act_Call) Run(run func()) *PoolsSDK_Act_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolsSDK_Act_Call) Return(_a0 types.FEVMActions) *PoolsSDK_Act_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolsSDK_Act_Call) RunAndReturn(run func() types.FEVMActions) *PoolsSDK_Act_Call {
	_c.Call.Return(run)
	return _c
}

// Extern provides a mock function with given fields:
func (_m *PoolsSDK) Extern() types.FEVMExtern {
	ret := _m.Called()

	var r0 types.FEVMExtern
	if rf, ok := ret.Get(0).(func() types.FEVMExtern); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.FEVMExtern)
		}
	}

	return r0
}

// PoolsSDK_Extern_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extern'
type PoolsSDK_Extern_Call struct {
	*mock.Call
}

// Extern is a helper method to define mock.On call
func (_e *PoolsSDK_Expecter) Extern() *PoolsSDK_Extern_Call {
	return &PoolsSDK_Extern_Call{Call: _e.mock.On("Extern")}
}

func (_c *PoolsSDK_Extern_Call) Run(run func()) *PoolsSDK_Extern_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolsSDK_Extern_Call) Return(_a0 types.FEVMExtern) *PoolsSDK_Extern_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolsSDK_Extern_Call) RunAndReturn(run func() types.FEVMExtern) *PoolsSDK_Extern_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields:
func (_m *PoolsSDK) Query() types.FEVMQueries {
	ret := _m.Called()

	var r0 types.FEVMQueries
	if rf, ok := ret.Get(0).(func() types.FEVMQueries); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.FEVMQueries)
		}
	}

	return r0
}

// PoolsSDK_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type PoolsSDK_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *PoolsSDK_Expecter) Query() *PoolsSDK_Query_Call {
	return &PoolsSDK_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *PoolsSDK_Query_Call) Run(run func()) *PoolsSDK_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolsSDK_Query_Call) Return(_a0 types.FEVMQueries) *PoolsSDK_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolsSDK_Query_Call) RunAndReturn(run func() types.FEVMQueries) *PoolsSDK_Query_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPoolsSDK interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoolsSDK creates a new instance of PoolsSDK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoolsSDK(t mockConstructorTestingTNewPoolsSDK) *PoolsSDK {
	mock := &PoolsSDK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
