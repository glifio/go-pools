// Code generated by mockery v2.20.0. DO NOT EDIT.

package mock

import (
	context "context"

	api "github.com/filecoin-project/lotus/api"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	jsonrpc "github.com/filecoin-project/go-jsonrpc"

	mock "github.com/stretchr/testify/mock"
)

// FEVMExtern is an autogenerated mock type for the FEVMExtern type
type FEVMExtern struct {
	mock.Mock
}

type FEVMExtern_Expecter struct {
	mock *mock.Mock
}

func (_m *FEVMExtern) EXPECT() *FEVMExtern_Expecter {
	return &FEVMExtern_Expecter{mock: &_m.Mock}
}

// ConnectAdoClient provides a mock function with given fields: ctx
func (_m *FEVMExtern) ConnectAdoClient(ctx context.Context) (jsonrpc.ClientCloser, error) {
	ret := _m.Called(ctx)

	var r0 jsonrpc.ClientCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (jsonrpc.ClientCloser, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) jsonrpc.ClientCloser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jsonrpc.ClientCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FEVMExtern_ConnectAdoClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectAdoClient'
type FEVMExtern_ConnectAdoClient_Call struct {
	*mock.Call
}

// ConnectAdoClient is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FEVMExtern_Expecter) ConnectAdoClient(ctx interface{}) *FEVMExtern_ConnectAdoClient_Call {
	return &FEVMExtern_ConnectAdoClient_Call{Call: _e.mock.On("ConnectAdoClient", ctx)}
}

func (_c *FEVMExtern_ConnectAdoClient_Call) Run(run func(ctx context.Context)) *FEVMExtern_ConnectAdoClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FEVMExtern_ConnectAdoClient_Call) Return(_a0 jsonrpc.ClientCloser, _a1 error) *FEVMExtern_ConnectAdoClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FEVMExtern_ConnectAdoClient_Call) RunAndReturn(run func(context.Context) (jsonrpc.ClientCloser, error)) *FEVMExtern_ConnectAdoClient_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectEthClient provides a mock function with given fields:
func (_m *FEVMExtern) ConnectEthClient() (*ethclient.Client, error) {
	ret := _m.Called()

	var r0 *ethclient.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*ethclient.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *ethclient.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ethclient.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FEVMExtern_ConnectEthClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectEthClient'
type FEVMExtern_ConnectEthClient_Call struct {
	*mock.Call
}

// ConnectEthClient is a helper method to define mock.On call
func (_e *FEVMExtern_Expecter) ConnectEthClient() *FEVMExtern_ConnectEthClient_Call {
	return &FEVMExtern_ConnectEthClient_Call{Call: _e.mock.On("ConnectEthClient")}
}

func (_c *FEVMExtern_ConnectEthClient_Call) Run(run func()) *FEVMExtern_ConnectEthClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FEVMExtern_ConnectEthClient_Call) Return(_a0 *ethclient.Client, _a1 error) *FEVMExtern_ConnectEthClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FEVMExtern_ConnectEthClient_Call) RunAndReturn(run func() (*ethclient.Client, error)) *FEVMExtern_ConnectEthClient_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectLotusClient provides a mock function with given fields:
func (_m *FEVMExtern) ConnectLotusClient() (*api.FullNodeStruct, jsonrpc.ClientCloser, error) {
	ret := _m.Called()

	var r0 *api.FullNodeStruct
	var r1 jsonrpc.ClientCloser
	var r2 error
	if rf, ok := ret.Get(0).(func() (*api.FullNodeStruct, jsonrpc.ClientCloser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *api.FullNodeStruct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.FullNodeStruct)
		}
	}

	if rf, ok := ret.Get(1).(func() jsonrpc.ClientCloser); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(jsonrpc.ClientCloser)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FEVMExtern_ConnectLotusClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectLotusClient'
type FEVMExtern_ConnectLotusClient_Call struct {
	*mock.Call
}

// ConnectLotusClient is a helper method to define mock.On call
func (_e *FEVMExtern_Expecter) ConnectLotusClient() *FEVMExtern_ConnectLotusClient_Call {
	return &FEVMExtern_ConnectLotusClient_Call{Call: _e.mock.On("ConnectLotusClient")}
}

func (_c *FEVMExtern_ConnectLotusClient_Call) Run(run func()) *FEVMExtern_ConnectLotusClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FEVMExtern_ConnectLotusClient_Call) Return(_a0 *api.FullNodeStruct, _a1 jsonrpc.ClientCloser, _a2 error) *FEVMExtern_ConnectLotusClient_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FEVMExtern_ConnectLotusClient_Call) RunAndReturn(run func() (*api.FullNodeStruct, jsonrpc.ClientCloser, error)) *FEVMExtern_ConnectLotusClient_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFEVMExtern interface {
	mock.TestingT
	Cleanup(func())
}

// NewFEVMExtern creates a new instance of FEVMExtern. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFEVMExtern(t mockConstructorTestingTNewFEVMExtern) *FEVMExtern {
	mock := &FEVMExtern{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
